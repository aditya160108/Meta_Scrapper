{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNC/vCXT8mspgpy3/hQNmWo",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aditya160108/Meta_Scrapper/blob/main/removed%20redundant%20meta_title\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nj5Diit4yRKX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "7a8658de-9565-48d7-fda6-d809360560a2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter multiple URLs separated by commas: https://www.encstore.com/blog/5217-rfid-tags-for-asset-tracking,https://www.encstore.com/uhf-rfid-asset-tags-for-laptop-and-hard-disk-enc5083,https://www.encstore.com/uhf-rfid-pcb-on-metal-asset-tag--enc5561,https://www.encstore.com/blog/5395-the-pros-and-cons-of-ble-for-asset-tracking,https://www.encstore.com/blog/5093-what-is-the-cost-of-rfid-tags-in-india,https://www.encstore.com/uhf-mount-on-metal-rfid-tags-enc5244,https://www.encstore.com/uhf-rfid-paper-label-tags-for-asset-tracking-enc5498,https://www.encstore.com/explore/uhf-rfid-tags,https://www.encstore.com/blog/5202-ble-for-asset-tracking,https://www.encstore.com/blog/5583-rfid-based-asset-tracking-and-management-system,https://www.encstore.com/edge-8521-mount-on-metal-uhf-rfid-hard-tag-enc5738,https://www.encstore.com/uhf-high-quality-on-metal-rfid-tag-enc5564,https://www.encstore.com/uhf-rfid-polyester-asset-tracking-label-tags-enc5415,https://www.encstore.com/blog/5113-ble-vs-rfid-asset-tracking-and-asset-management-,https://www.encstore.com/small-uhf-pcb-on-metal-rfid-tag-for-asset-tracking-enc5565,https://www.encstore.com/uhf-rfid-seal-tie-tag-for-asset-tracking-enc5035,https://www.encstore.com/blog/5554-uhf-mount-on-metal-rfid-tags-various-types-advantages-and-disadvantages,https://www.encstore.com/blog/5660-nfc-based-asset-tracking-nfc-tags-and-smartphones,https://www.encstore.com/uhf-rfid-pcb-anti-metal-tag-enc5416,https://www.encstore.com/blog/5259-acrylic-qr-code-display-stand,https://www.encstore.com/blog/5114-how-automation-using-rfid-qr-codes-and-ble-can-fill-the-supply-chain-gaps\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_69150388-fbca-46af-9623-115c1461f714\", \"scraped_metadata_20240116_060216.xlsx\", 7813)"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "from google.colab import files\n",
        "import pandas as pd\n",
        "import datetime\n",
        "\n",
        "def scrape_metadata(url):\n",
        "    try:\n",
        "        response = requests.get(url)\n",
        "        response.raise_for_status()\n",
        "\n",
        "        soup = BeautifulSoup(response.content, 'html.parser')\n",
        "\n",
        "        #title = soup.find('title').text if soup.title else None\n",
        "        title_tag = soup.find('title')\n",
        "        title = title_tag.text.strip() if title_tag else None\n",
        "\n",
        "#        meta_title_tag = soup.find('meta', attrs={'name': 'Title'})\n",
        "#        meta_title = meta_title_tag['content'] if meta_title_tag and 'content' in meta_title_tag.attrs else None\n",
        "\n",
        "        description_tag = soup.find('meta', attrs={'name': 'description'})\n",
        "        description = description_tag['content'] if description_tag and 'content' in description_tag.attrs else None\n",
        "\n",
        "        keywords_tag = soup.find('meta', attrs={'name': 'keywords'})\n",
        "        keywords = keywords_tag['content'] if keywords_tag and 'content' in keywords_tag.attrs else None\n",
        "\n",
        "        return title, description, keywords\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"Error fetching URL: {e}\")\n",
        "        return None, None, None\n",
        "\n",
        "urls = input(\"Enter multiple URLs separated by commas: \").split(\",\")\n",
        "\n",
        "data = []\n",
        "\n",
        "for url in urls:\n",
        "    title, description, keywords = scrape_metadata(url.strip())\n",
        "    data.append({'URL': url, 'Title': title, 'Description': description, 'Keywords': keywords})\n",
        "\n",
        "now = datetime.datetime.now()\n",
        "now_str = now.strftime(\"%Y%m%d_%H%M%S\")\n",
        "filename = f\"scraped_metadata_{now_str}.xlsx\"\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "df.to_excel(filename, index=False)\n",
        "files.download(filename)"
      ]
    }
  ]
}